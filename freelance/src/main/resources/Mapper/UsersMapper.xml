<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.example.freelance.Mapper.UsersMapper">


    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into user(openid, createtime, name, age, sex, phone, payment, description, address, avatar)
        values(#{openid}, #{createtime},#{name}, #{age}, #{sex}, #{phone}, #{payment}, #{description}, #{address}, #{avatar})

    </insert>
    <update id="update">
        update   user
        <set>
            <if test="name!= null ">name = #{name},</if>
            <if test="age != null ">age = #{age},</if>
            <if test="sex!= null ">sex = #{sex},</if>
            <if test="phone!= null ">phone = #{phone},</if>
            <if test="payment!= null ">payment = #{payment},</if>
            <if test="description!= null ">description = #{description},</if>
            <if test="address!= null ">address = #{address},</if>
            <if test="createtime!= null ">createtime = #{createtime},</if>
            <if test="avatar!= null ">avatar = #{avatar},</if>
            <if test="identity != null ">identity = #{identity},</if>
        </set>
            where openid = #{openid}
    </update>
    <delete id="deleteBatch">
        delete from user where openid in
                <foreach collection="selectedIds" item="openid" separator="," open="(" close=")">#{openid}</foreach>
    </delete>
    <select id="countByMap" resultType="java.lang.Integer">
        select count(id) from user
        <where>
            <if test="startDate != null">
                and  createtime &gt; #{startDate}
            </if>
            <if test="endDate != null">
                and  createtime &lt; #{endDate}
            </if>
        </where>
    </select>

    <resultMap id="salaryRangeResult" type="org.example.freelance.pojo.VO.SalaryRange">
        <result property="salaryRange" column="salary_range"/>
        <result property="userCout" column="user_count"/>
    </resultMap>

    <select id="getSalaryRangeData" resultMap="salaryRangeResult">
        SELECT
        salary_range,
        COUNT(*) AS user_count
        FROM (
        SELECT
        CASE
        WHEN payment &lt; 1000 THEN '低于 1,000'
        WHEN payment >= 1000 AND payment &lt; 3000 THEN '1,000 - 3,000'
        WHEN payment >= 3000 AND payment &lt; 5000 THEN '3,000 - 5,000'
        ELSE '5,000 以上'
        END AS salary_range
        FROM user
        ) AS salary_range_data
        GROUP BY salary_range;
    </select>
</mapper>